//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIBasesWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIBases), typeof(U3DEventFrame.UIBase));
		L.RegFunction("Awake", Awake);
		L.RegFunction("Initial", Initial);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("AddComponentToChild", AddComponentToChild);
		L.RegFunction("LoadResources", LoadResources);
		L.RegFunction("InitialPanle", InitialPanle);
		L.RegFunction("InitialGameObj", InitialGameObj);
		L.RegFunction("GetSubManager", GetSubManager);
		L.RegFunction("GetGameObject", GetGameObject);
		L.RegFunction("AddButtonLisenter", AddButtonLisenter);
		L.RegFunction("AddButtonDownLisenter", AddButtonDownLisenter);
		L.RegFunction("AddButtonUpLisenter", AddButtonUpLisenter);
		L.RegFunction("AddSliderLisenter", AddSliderLisenter);
		L.RegFunction("AddInputFiledLisenter", AddInputFiledLisenter);
		L.RegFunction("AddToggleLisenter", AddToggleLisenter);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Awake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			obj.Awake();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.Initial(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddComponentToChild(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			obj.AddComponentToChild();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadResources(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Object o = obj.LoadResources(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitialPanle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIBases), typeof(UnityEngine.Object)))
			{
				UIBases obj = (UIBases)ToLua.ToObject(L, 1);
				UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 2);
				UnityEngine.GameObject o = obj.InitialPanle(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIBases), typeof(string)))
			{
				UIBases obj = (UIBases)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.GameObject o = obj.InitialPanle(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIBases.InitialPanle");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitialGameObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			UnityEngine.GameObject o = obj.InitialGameObj(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSubManager(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			string arg0 = ToLua.CheckString(L, 2);
			UISubManager o = obj.GetSubManager(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.GetGameObject(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddButtonLisenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Events.UnityAction arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (UnityEngine.Events.UnityAction)ToLua.CheckObject(L, 3, typeof(UnityEngine.Events.UnityAction));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Events.UnityAction), func) as UnityEngine.Events.UnityAction;
			}

			obj.AddButtonLisenter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddButtonDownLisenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData>)ToLua.CheckObject(L, 3, typeof(UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData>), func) as UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData>;
			}

			obj.AddButtonDownLisenter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddButtonUpLisenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData>)ToLua.CheckObject(L, 3, typeof(UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData>), func) as UnityEngine.Events.UnityAction<UnityEngine.EventSystems.BaseEventData>;
			}

			obj.AddButtonUpLisenter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSliderLisenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Events.UnityAction<float> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (UnityEngine.Events.UnityAction<float>)ToLua.CheckObject(L, 3, typeof(UnityEngine.Events.UnityAction<float>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Events.UnityAction<float>), func) as UnityEngine.Events.UnityAction<float>;
			}

			obj.AddSliderLisenter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddInputFiledLisenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Events.UnityAction<string> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (UnityEngine.Events.UnityAction<string>)ToLua.CheckObject(L, 3, typeof(UnityEngine.Events.UnityAction<string>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Events.UnityAction<string>), func) as UnityEngine.Events.UnityAction<string>;
			}

			obj.AddInputFiledLisenter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddToggleLisenter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBases obj = (UIBases)ToLua.CheckObject(L, 1, typeof(UIBases));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Events.UnityAction<bool> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (UnityEngine.Events.UnityAction<bool>)ToLua.CheckObject(L, 3, typeof(UnityEngine.Events.UnityAction<bool>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Events.UnityAction<bool>), func) as UnityEngine.Events.UnityAction<bool>;
			}

			obj.AddToggleLisenter(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

